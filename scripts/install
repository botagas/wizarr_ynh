#!/bin/bash

#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

# Generate secret key for Flask
secret_key=$(ynh_string_random)

# Generate API key for Wizarr status endpoint
api_key=$(ynh_string_random)

# ynh_app_setting_set --app=$app --key=password --value="$password"
ynh_app_setting_set --app=$app --key=secret_key --value="$secret_key"
ynh_app_setting_set --app=$app --key=api_key --value="$api_key"
ynh_app_setting_set --app=$app --key=admin_username --value="$admin_username"
ynh_app_setting_set --app=$app --key=admin_password --value="$admin_password"

#=================================================
# INSTALL PYTHON 3.13 FROM SOURCE
#=================================================
ynh_script_progression "Installing Python 3.13..."

# Check if Python 3.13 is already installed, if not install it
check_python

#=================================================
# INSTALL UV PACKAGE MANAGER
#=================================================
ynh_script_progression "Installing UV package manager..."

# Install UV using pipx (following immich_ynh approach)
install_uv

#=================================================
# INSTALL NODE.JS FOR FRONTEND BUILD
#=================================================
ynh_script_progression "Installing Node.js..."

# Install Node.js (required for frontend build)
nodejs_version="22"
ynh_nodejs_install

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression "Setting up source files..."

ynh_setup_source --dest_dir="$install_dir"

#=================================================
# CREATE PYTHON VIRTUAL ENVIRONMENT
#=================================================
ynh_script_progression "Setting up Python virtual environment..."

pushd "$install_dir"
    # Create virtual environment using Python 3.13
    /usr/local/bin/python$py_vshort -m venv --upgrade-deps .venv
    
    # Activate virtual environment and install UV
    source .venv/bin/activate
    pip install --upgrade pip
    pip install uv
    
    # Use UV to install dependencies from pyproject.toml
    uv sync --locked
    
    deactivate
popd

#=================================================
# BUILD FRONTEND ASSETS
#=================================================
ynh_script_progression "Building frontend assets..."

pushd "$install_dir"
    # Install npm dependencies and build frontend
    npm --prefix app/static/ install
    npm --prefix app/static/ run build
    
    # Compile translations using UV
    source .venv/bin/activate
    uv run pybabel compile -d app/translations
    deactivate
popd

#=================================================
# CREATE APPLICATION DIRECTORIES
#=================================================
ynh_script_progression "Creating application directories..."

mkdir -p "$install_dir"/{database,logs,data}
mkdir -p "$install_dir/database/sessions"
mkdir -p "/var/log/$app"
touch "/var/log/$app/$app.log"

#=================================================
# APP CONFIGURATION
#=================================================
ynh_script_progression "Configuring application..."

# Create gunicorn configuration
ynh_config_add --template="gunicorn.conf.py" --destination="$install_dir/gunicorn.conf.py"

# Create environment file for Wizarr's environment variable usage
cat > "$install_dir/.env" << EOF
# Application version (displayed in startup logs)
APP_VERSION=$(ynh_read_manifest "version" | cut -d'~' -f1)

# Timezone configuration
TZ=$(timedatectl show --property=Timezone --value)

# Logging configuration
LOG_LEVEL=INFO

# Optional API key for /api/status endpoint (generate a secure key)
WIZARR_API_KEY=$api_key

# Disable built-in auth if using external auth providers (Authelia, Authentik, etc)
DISABLE_BUILTIN_AUTH=false
EOF

#=================================================
# DATABASE INITIALIZATION
#=================================================
ynh_script_progression "Initializing database..."

pushd "$install_dir"
    source .venv/bin/activate
    
    # Initialize database with migrations
    uv run flask --app run:app db upgrade
    
    deactivate
popd

#=================================================
# SYSTEM CONFIGURATION
#=================================================
ynh_script_progression "Adding system configurations related to $app..."

# Create a dedicated NGINX config using the conf/nginx.conf template
ynh_config_add_nginx

# Create a dedicated systemd config
ynh_config_add_systemd

yunohost service add "$app" --description="Wizarr media server invitation system" --log="/var/log/$app/$app.log"

# Use logrotate to manage application logfile(s)
ynh_config_add_logrotate

# Set proper permissions after database creation
chown -R "$app:$app" "$install_dir"
chown -R "$app:$app" "/var/log/$app"

#=================================================
# SETUP APPLICATION WITH CURL
#=================================================
ynh_script_progression "Starting $app service..."

# Start the systemd service
ynh_systemctl --service="$app" --action="start"

# Wait for Wizarr to be fully ready
timeout=60
while [ $timeout -gt 0 ]; do
    if curl -f -s "http://127.0.0.1:$port/health" > /dev/null 2>&1; then
        break
    fi
    sleep 2
    ((timeout--))
done

if [ $timeout -eq 0 ]; then
    ynh_print_warn "Wizarr did not start properly. Manual setup may be required."
else
    ynh_print_info "Wizarr is ready at https://$domain$path"
    
    # Attempt automatic admin account creation
    ynh_script_progression "Creating admin account..."
    
    # Wait a bit more for Wizarr to be fully initialized
    sleep 3
    
    # Create a temporary cookie jar for session management
    cookie_jar="/tmp/wizarr_cookies.txt"
    
    # First, get the setup form and extract CSRF token while maintaining session
    setup_page=$(curl -s -c "$cookie_jar" "http://127.0.0.1:$port/setup/")
    csrf_token=$(echo "$setup_page" | grep 'csrf_token' | sed 's/.*value="\([^"]*\)".*/\1/')
    
    if [ -n "$csrf_token" ]; then
        ynh_print_info "CSRF token retrieved: ${csrf_token:0:20}..."
        
        # Submit the form with session cookies
        setup_response=$(curl -s -b "$cookie_jar" -c "$cookie_jar" \
            -X POST "http://127.0.0.1:$port/setup/" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "csrf_token=$csrf_token&username=$admin_username&password=$admin_password&confirm=$admin_password" \
            --connect-timeout 10 --max-time 30)
        
        ynh_print_info "Form submitted, checking response..."
        
        # Check if there are validation errors in the response
        if echo "$setup_response" | grep -q "text-red-600\|text-red-500"; then
            ynh_print_warn "Form validation errors detected:"
            echo "$setup_response" | grep -A1 -B1 "text-red-600\|text-red-500" | sed 's/<[^>]*>//g' | grep -v "^--$" | while read line; do
                if [ -n "$line" ]; then
                    ynh_print_warn "  $line"
                fi
            done
        elif echo "$setup_response" | grep -q "Setup Wizarr.*form"; then
            ynh_print_warn "Setup form is still displayed - checking for other issues..."
            
            # Check if password meets requirements
            if ! echo "$admin_password" | grep -q '[A-Z]'; then
                ynh_print_warn "Password missing uppercase letter"
            fi
            if ! echo "$admin_password" | grep -q '[a-z]'; then
                ynh_print_warn "Password missing lowercase letter"
            fi
            if ! echo "$admin_password" | grep -q '[0-9]'; then
                ynh_print_warn "Password missing number"
            fi
            if [ ${#admin_password} -lt 8 ]; then
                ynh_print_warn "Password too short (less than 8 characters)"
            fi
            
            ynh_print_warn "Please complete setup manually through the web interface."
        else
            ynh_print_info "Admin account creation appears successful!"
            
            # Try to access the admin page to verify
            admin_response=$(curl -s -b "$cookie_jar" "http://127.0.0.1:$port/admin")
            if echo "$admin_response" | grep -q "dashboard\|admin"; then
                ynh_print_info "Admin dashboard accessible - setup completed successfully"
            else
                ynh_print_info "Setup completed, login required to access admin"
            fi
        fi
        
        # Clean up cookie jar
        rm -f "$cookie_jar"
    else
        ynh_print_warn "Could not retrieve CSRF token for setup"
        ynh_print_warn "Please complete setup manually through the web interface."
    fi
    
    ynh_print_info "Username: $admin_username"
    ynh_print_info "You can access Wizarr at https://$domain$path"
    
    ynh_print_info "API Key for /api/status endpoint: $api_key"
fi

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression "Installation of $app completed"
