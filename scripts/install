#!/bin/bash

#============================# Generate API key for Wizarr status endpoint
api_key=$(ynh_string_random)

ynh_app_setting_set --app=$app --key=secret_key --value="$secret_key"
ynh_app_setting_set --app=$app --key=api_key --value="$api_key"
ynh_app_setting_set --app=$app --key=admin_username --value="$admin_username"
ynh_app_setting_set --app=$app --key=admin_password --value="$admin_password"===============
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

# Generate secret key for Flask
secret_key=$(ynh_string_random)

# Generate API key for Wizarr status endpoint
api_key=$(ynh_string_random)

# ynh_app_setting_set --app=$app --key=password --value="$password"
ynh_app_setting_set --app=$app --key=secret_key --value="$secret_key"
ynh_app_setting_set --app=$app --key=api_key --value="$api_key"

#=================================================
# INSTALL PYTHON 3.13 FROM SOURCE
#=================================================
ynh_script_progression "Installing Python 3.13..."

# Check if Python 3.13 is already installed, if not install it
check_python

#=================================================
# INSTALL UV PACKAGE MANAGER
#=================================================
ynh_script_progression "Installing UV package manager..."

# Install UV using pipx (following immich_ynh approach)
install_uv

#=================================================
# INSTALL NODE.JS FOR FRONTEND BUILD
#=================================================
ynh_script_progression "Installing Node.js..."

# Install Node.js (required for frontend build)
nodejs_version="22"
ynh_nodejs_install

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression "Setting up source files..."

ynh_setup_source --dest_dir="$install_dir"
chown -R "$app:$app" "$install_dir"

#=================================================
# CREATE PYTHON VIRTUAL ENVIRONMENT
#=================================================
ynh_script_progression "Setting up Python virtual environment..."

pushd "$install_dir"
    # Create virtual environment using Python 3.13
    /usr/local/bin/python$py_vshort -m venv --upgrade-deps .venv
    
    # Activate virtual environment and install UV
    source .venv/bin/activate
    pip install --upgrade pip
    pip install uv
    
    # Use UV to install dependencies from pyproject.toml
    uv sync --locked
    
    deactivate
popd

#=================================================
# BUILD FRONTEND ASSETS
#=================================================
ynh_script_progression "Building frontend assets..."

pushd "$install_dir"
    # Install npm dependencies and build frontend
    npm --prefix app/static/ install
    npm --prefix app/static/ run build
    
    # Compile translations using UV
    source .venv/bin/activate
    uv run pybabel compile -d app/translations
    deactivate
popd

#=================================================
# CREATE APPLICATION DIRECTORIES
#=================================================
ynh_script_progression "Creating application directories..."

mkdir -p "$install_dir"/{database,logs,data}
mkdir -p "/var/log/$app"

chown -R "$app:$app" "$install_dir"
chown -R "$app:$app" "/var/log/$app"

#=================================================
# APP CONFIGURATION
#=================================================
ynh_script_progression "Configuring application..."

# Create gunicorn configuration
ynh_config_add --template="gunicorn.conf.py" --destination="$install_dir/gunicorn.conf.py"

# Create environment file for Wizarr's environment variable usage
cat > "$install_dir/.env" << EOF
# Application version (displayed in startup logs)
APP_VERSION=$(ynh_read_manifest "version" | cut -d'~' -f1)

# Timezone configuration
TZ=$(timedatectl show --property=Timezone --value)

# Logging configuration
LOG_LEVEL=INFO

# Optional API key for /api/status endpoint (generate a secure key)
WIZARR_API_KEY=$api_key

# Disable built-in auth if using external auth providers (Authelia, Authentik, etc)
DISABLE_BUILTIN_AUTH=false

# Internal URL configuration to avoid SSL issues
SERVER_NAME=127.0.0.1:$port
PREFERRED_URL_SCHEME=http

# Flask configuration for internal requests
FLASK_ENV=production
EOF

chown "$app:$app" "$install_dir/.env" "$install_dir/gunicorn.conf.py"

#=================================================
# DATABASE INITIALIZATION
#=================================================
ynh_script_progression "Initializing database..."

pushd "$install_dir"
    source .venv/bin/activate
    
    # Initialize database with migrations
    uv run flask --app run:app db upgrade
    
    deactivate
popd

#=================================================
# SYSTEM CONFIGURATION
#=================================================
ynh_script_progression "Adding system configurations related to $app..."

# Create a dedicated NGINX config using the conf/nginx.conf template
ynh_config_add_nginx

# Create a dedicated systemd config
ynh_config_add_systemd

yunohost service add "$app" --description="Wizarr media server invitation system" --log="/var/log/$app/$app.log"

# Use logrotate to manage application logfile(s)
ynh_config_add_logrotate

#=================================================
# SETUP APPLICATION WITH CURL
#=================================================
ynh_script_progression "Starting $app service..."

# Start the systemd service
ynh_systemctl --service="$app" --action="start"

# Wait for Wizarr to be fully ready
timeout=60
while [ $timeout -gt 0 ]; do
    if curl -f -s "http://127.0.0.1:$port/health" > /dev/null 2>&1; then
        break
    fi
    sleep 2
    ((timeout--))
done

if [ $timeout -eq 0 ]; then
    ynh_print_warn "Wizarr did not start properly. Manual setup may be required."
else
    ynh_print_info "Wizarr is ready at https://$domain$path"
    
    # Attempt automatic admin account creation
    ynh_script_progression "Creating admin account..."
    
    # Wait a bit more for Wizarr to be fully initialized
    sleep 3
    
    # Create admin account via API
    setup_response=$(curl -s -X POST "http://127.0.0.1:$port/setup" 
        -H "Content-Type: application/x-www-form-urlencoded" 
        -d "username=$admin_username&password=$admin_password&confirm=$admin_password" 
        --connect-timeout 10 --max-time 30)
    
    if curl -f -s "http://127.0.0.1:$port/admin" > /dev/null 2>&1; then
        ynh_print_info "Admin account created successfully!"
        ynh_print_info "Username: $admin_username"
        ynh_print_info "You can now log in at https://$domain$path"
    else
        ynh_print_warn "Automatic setup may have failed. Please complete setup manually through the web interface."
        ynh_print_info "Username: $admin_username"
    fi
    
    ynh_print_info "API Key for /api/status endpoint: $api_key"
fi

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression "Installation of $app completed"
